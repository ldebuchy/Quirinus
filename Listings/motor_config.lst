


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument); 
    2 00000000         ; programme - Pilotage 2 Moteurs Evalbot par PWM tout en
                        ASM (configure les pwms + GPIO)
    3 00000000         
    4 00000000         ;Les pages se réfèrent au datasheet lm3s9b92.pdf
    5 00000000         
    6 00000000         ;Cablage :
    7 00000000         ;pin 10/PD0/PWM0 => input PWM du pont en H DRV8801RT
    8 00000000         ;pin 11/PD1/PWM1 => input Phase_R  du pont en H DRV8801R
                       T
    9 00000000         ;pin 12/PD2   => input SlowDecay commune aux 2 ponts en 
                       H
   10 00000000         ;pin 98/PD5   => input Enable 12v du conv DC/DC 
   11 00000000         ;pin 86/PH0/PWM2 => input PWM du 2nd pont en H
   12 00000000         ;pin 85/PH1/PWM3 => input Phase du 2nd pont en H 
   13 00000000         
   14 00000000         ;; Hexa corresponding values to pin numbers
   15 00000000 00000001 
                       GPIO_0  EQU              0x1
   16 00000000 00000002 
                       GPIO_1  EQU              0x2
   17 00000000 00000004 
                       GPIO_2  EQU              0x4
   18 00000000 00000020 
                       GPIO_5  EQU              0x20
   19 00000000         
   20 00000000         ;; pour enable clock    0x400FE000
   21 00000000 400FE100 
                       SYSCTL_RCGC0
                               EQU              0x400FE100  ;SYSCTL_RCGC0: offs
                                                            et 0x100 (p271 data
                                                            sheet de lm3s9b92.p
                                                            df)
   22 00000000 400FE108 
                       SYSCTL_RCGC2
                               EQU              0x400FE108  ;SYSCTL_RCGC2: offs
                                                            et 0x108 (p291 data
                                                            sheet de lm3s9b92.p
                                                            df)
   23 00000000         
   24 00000000         ;; General-Purpose Input/Outputs (GPIO) configuration
   25 00000000 40007000 
                       PORTD_BASE
                               EQU              0x40007000
   26 00000000 40007000 
                       GPIODATA_D
                               EQU              PORTD_BASE
   27 00000000 40007400 
                       GPIODIR_D
                               EQU              PORTD_BASE+0x00000400
   28 00000000 40007500 
                       GPIODR2R_D
                               EQU              PORTD_BASE+0x00000500
   29 00000000 4000751C 
                       GPIODEN_D
                               EQU              PORTD_BASE+0x0000051C
   30 00000000 4000752C 
                       GPIOPCTL_D
                               EQU              PORTD_BASE+0x0000052C ; GPIO Po



ARM Macro Assembler    Page 2 


                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   31 00000000 40007420 
                       GPIOAFSEL_D
                               EQU              PORTD_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   32 00000000         
   33 00000000 40027000 
                       PORTH_BASE
                               EQU              0x40027000
   34 00000000 40027000 
                       GPIODATA_H
                               EQU              PORTH_BASE
   35 00000000 40027400 
                       GPIODIR_H
                               EQU              PORTH_BASE+0x00000400
   36 00000000 40027500 
                       GPIODR2R_H
                               EQU              PORTH_BASE+0x00000500
   37 00000000 4002751C 
                       GPIODEN_H
                               EQU              PORTH_BASE+0x0000051C
   38 00000000 4002752C 
                       GPIOPCTL_H
                               EQU              PORTH_BASE+0x0000052C ; GPIO Po
                                                            rt Control (GPIOPCT
                                                            L), offset 0x52C; p
                                                            444
   39 00000000 40027420 
                       GPIOAFSEL_H
                               EQU              PORTH_BASE+0x00000420 ; GPIO Al
                                                            ternate Function Se
                                                            lect (GPIOAFSEL), o
                                                            ffset 0x420; p426
   40 00000000         
   41 00000000         ;; Pulse Width Modulator (PWM) configuration
   42 00000000 40028000 
                       PWM_BASE
                               EQU              0x040028000 ;BASE des Block PWM
                                                             p.1138
   43 00000000 40028008 
                       PWMENABLE
                               EQU              PWM_BASE+0x008 ; p1145
   44 00000000         
   45 00000000         ;Block PWM0 pour sorties PWM0 et PWM1 (moteur 1)
   46 00000000 40028040 
                       PWM0CTL EQU              PWM_BASE+0x040 ;p1167
   47 00000000 40028050 
                       PWM0LOAD
                               EQU              PWM_BASE+0x050
   48 00000000 40028058 
                       PWM0CMPA
                               EQU              PWM_BASE+0x058
   49 00000000 4002805C 
                       PWM0CMPB
                               EQU              PWM_BASE+0x05C



ARM Macro Assembler    Page 3 


   50 00000000 40028060 
                       PWM0GENA
                               EQU              PWM_BASE+0x060
   51 00000000 40028064 
                       PWM0GENB
                               EQU              PWM_BASE+0x064
   52 00000000         
   53 00000000         ;Block PWM1 pour sorties PWM1 et PWM2 (moteur 2)
   54 00000000 40028080 
                       PWM1CTL EQU              PWM_BASE+0x080
   55 00000000 40028090 
                       PWM1LOAD
                               EQU              PWM_BASE+0x090
   56 00000000 40028098 
                       PWM1CMPA
                               EQU              PWM_BASE+0x098
   57 00000000 4002809C 
                       PWM1CMPB
                               EQU              PWM_BASE+0x09C
   58 00000000 400280A0 
                       PWM1GENA
                               EQU              PWM_BASE+0x0A0
   59 00000000 400280A4 
                       PWM1GENB
                               EQU              PWM_BASE+0x0A4
   60 00000000         
   61 00000000         
   62 00000000 00000001 
                       VITESSE EQU              0x1         ; Valeures plus pet
                                                            ites => Vitesse plu
                                                            s rapide exemple 0x
                                                            192
   63 00000000         ; Valeures plus grandes => Vitesse moins rapide exemple 
                       0x1B2
   64 00000000         
   65 00000000         
   66 00000000                 AREA             |.text|, CODE, READONLY
   67 00000000                 ENTRY
   68 00000000         
   69 00000000         ;; The EXPORT command specifies that a symbol can be acc
                       essed by other shared objects or executables.
   70 00000000                 EXPORT           MOTEUR_INIT
   71 00000000                 EXPORT           MOTEUR_DROIT_ON
   72 00000000                 EXPORT           MOTEUR_DROIT_OFF
   73 00000000                 EXPORT           MOTEUR_DROIT_AVANT
   74 00000000                 EXPORT           MOTEUR_DROIT_ARRIERE
   75 00000000                 EXPORT           MOTEUR_GAUCHE_ON
   76 00000000                 EXPORT           MOTEUR_GAUCHE_OFF
   77 00000000                 EXPORT           MOTEUR_GAUCHE_AVANT
   78 00000000                 EXPORT           MOTEUR_GAUCHE_ARRIERE
   79 00000000         
   80 00000000         MOTEUR_INIT
   81 00000000 4E56            ldr              r6, = SYSCTL_RCGC0
   82 00000002 6830            ldr              r0, [R6]
   83 00000004 F440 1080       ORR              r0, r0, #0x00100000 ;;bit 20 = 
                                                            PWM recoit clock: O
                                                            N (p271) 
   84 00000008 6030            str              r0, [r6]
   85 0000000A         



ARM Macro Assembler    Page 4 


   86 0000000A         ;ROM_SysCtlPWMClockSet(SYSCTL_PWMDIV_1);PWM clock is pro
                       cessor clock /1
   87 0000000A         ;Je ne fais rien car par defaut = OK!!
   88 0000000A         ;*(int *) (0x400FE060)= *(int *)(0x400FE060)...;
   89 0000000A         
   90 0000000A         ;RCGC2 :  Enable port D GPIO(p291 ) car Moteur Droit sur
                        port D 
   91 0000000A 4E55            ldr              r6, = SYSCTL_RCGC2
   92 0000000C 6830            ldr              r0, [R6]
   93 0000000E F040 0008       ORR              r0, r0, #0x08 ;; Enable p ort D
                                                             GPIO 
   94 00000012 6030            str              r0, [r6]
   95 00000014         
   96 00000014         ;MOT2 : RCGC2 :  Enable port H GPIO  (2eme moteurs)
   97 00000014 4E52            ldr              r6, = SYSCTL_RCGC2
   98 00000016 6830            ldr              r0, [R6]
   99 00000018 F040 0080       ORR              r0, r0, #0x80 ;; Enable port H 
                                                            GPIO 
  100 0000001C 6030            str              r0, [r6]
  101 0000001E         
  102 0000001E BF00            nop
  103 00000020 BF00            nop
  104 00000022 BF00            nop
  105 00000024         
  106 00000024         ;;Pin muxing pour PWM, port D, reg. GPIOPCTL(p444), 4bit
                       s de PCM0=0001<=>PWM (voir p1261)
  107 00000024         ;;il faut mettre 1 pour avoir PD0=PWM0 et PD1=PWM1
  108 00000024 4E4F            ldr              r6, = GPIOPCTL_D
  109 00000026         ;ldr r0, [R6]   ;; *(int *)(0x40007000+0x0000052C)=1;
  110 00000026         ;ORR r0, r0, #0x01 ;; Port D, pin 1 = PWM 
  111 00000026 F04F 0001       mov              r0, #0x01
  112 0000002A 6030            str              r0, [r6]
  113 0000002C         
  114 0000002C         ;;MOT2 : Pin muxing pour PWM, port H, reg. GPIOPCTL(p444
                       ), 4bits de PCM0=0001<=>PWM (voir p1261)
  115 0000002C         ;;il faut mettre mux = 2 pour avoir PH0=PWM2 et PH1=PWM3
                       
  116 0000002C 4E4E            ldr              r6, = GPIOPCTL_H
  117 0000002E F04F 0002       mov              r0, #0x02
  118 00000032 6030            str              r0, [r6]
  119 00000034         
  120 00000034         ;;Alternate Function Select (p 426), PD0 utilise alernat
                       e fonction (PWM au dessus)
  121 00000034         ;;donc PD0 = 1
  122 00000034 4E4D            ldr              r6, = GPIOAFSEL_D
  123 00000036 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in
                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  124 00000038 F040 0001       ORR              r0, r0, #0x01 ;
  125 0000003C 6030            str              r0, [r6]
  126 0000003E         
  127 0000003E         ;;MOT2 : Alternate Function Select (p 426), PH0 utilise 
                       PWM donc Alternate funct
  128 0000003E         ;;donc PH0 = 1
  129 0000003E 4E4C            ldr              r6, = GPIOAFSEL_H
  130 00000040 6830            ldr              r0, [R6]    ;*(int *)(0x4000700
                                                            0+0x00000420)= *(in



ARM Macro Assembler    Page 5 


                                                            t *)(0x40007000+0x0
                                                            0000420) | 0x000000
                                                            01;
  131 00000042 F040 0001       ORR              r0, r0, #0x01 ;
  132 00000046 6030            str              r0, [r6]
  133 00000048         
  134 00000048         ;;-----------PWM0 pour moteur 1 connecté à PD0
  135 00000048         ;;PWM0 produit PWM0 et PWM1 output
  136 00000048         ;;Config Modes PWM0 + mode GenA + mode GenB
  137 00000048 4E4A            ldr              r6, = PWM0CTL
  138 0000004A F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  139 0000004E 6030            str              r0, [r6]
  140 00000050         
  141 00000050 4E49            ldr              r6, =PWM0GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  142 00000052         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  143 00000052 F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  144 00000056 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  145 00000058         
  146 00000058 4E48            ldr              r6, =PWM0GENB ;en comptage croi
                                                            ssant, qd comparate
                                                            urB = compteur => s
                                                            ortie pwmA=1
  147 0000005A F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  148 0000005E 6030            str              r0, [r6]
  149 00000060         ;Config Compteur, comparateur A et comparateur B
  150 00000060         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  151 00000060         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  152 00000060         ;;on divise par 2 car moteur 6v sur alim 12v
  153 00000060 4E47            ldr              r6, =PWM0LOAD ;PWM0LOAD=periode
                                                            /2 =0x1F4
  154 00000062 F44F 70FA       mov              r0, #0x1F4
  155 00000066 6030            str              r0,[r6]
  156 00000068         
  157 00000068 4E46            ldr              r6, =PWM0CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 
                                                            0F42400
  158 0000006A F04F 0001       mov              r0, #VITESSE
  159 0000006E 6030            str              r0, [r6]
  160 00000070         
  161 00000070 4E45            ldr              r6, =PWM0CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (rappo
                                                            rt cyclique depend 
                                                            de CMPA)



ARM Macro Assembler    Page 6 


  162 00000072 F44F 70FA       mov              r0, #0x1F4
  163 00000076 6030            str              r0, [r6]
  164 00000078         
  165 00000078         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  166 00000078 4E3E            ldr              r6, =PWM0CTL
  167 0000007A 6830            ldr              r0, [r6]
  168 0000007C F040 0007       ORR              r0, r0, #0x07
  169 00000080 6030            str              r0, [r6]
  170 00000082         
  171 00000082         ;;-----------PWM2 pour moteur 2 connecté à PH0
  172 00000082         ;;PWM1block produit PWM2 et PWM3 output
  173 00000082         ;;Config Modes PWM2 + mode GenA + mode GenB
  174 00000082 4E42            ldr              r6, = PWM1CTL
  175 00000084 F04F 0002       mov              r0, #2      ;Mode up-down-up-do
                                                            wn, pas synchro
  176 00000088 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x040)=2;
  177 0000008A         
  178 0000008A 4E41            ldr              r6, =PWM1GENA ;en decomptage, q
                                                            d comparateurA = co
                                                            mpteur => sortie pw
                                                            mA=0
  179 0000008C         ;en comptage croissant, qd comparateurA = compteur => so
                       rtie pwmA=1
  180 0000008C F04F 00B0       mov              r0, #0x0B0  ;0B0=10110000 => AC
                                                            TCMPBD=00 (B down:r
                                                            ien), ACTCMPBU=00(B
                                                             up rien)
  181 00000090 6030            str              r0, [r6]    ;ACTCMPAD=10 (A dow
                                                            n:pwmA low), ACTCMP
                                                            AU=11 (A up:pwmA hi
                                                            gh) , ACTLOAD=00,AC
                                                            TZERO=00  
  182 00000092         
  183 00000092         ;*(int *)(0x40028000+0x060)=0x0B0; //
  184 00000092 4E40            ldr              r6, =PWM1GENB ;*(int *)(0x40028
                                                            000+0x064)=0x0B00;
  185 00000094 F44F 6030       mov              r0, #0x0B00 ;en decomptage, qd 
                                                            comparateurB = comp
                                                            teur => sortie pwmB
                                                            =0
  186 00000098 6030            str              r0, [r6]    ;en comptage croiss
                                                            ant, qd comparateur
                                                            B = compteur => sor
                                                            tie pwmA=1
  187 0000009A         ;Config Compteur, comparateur A et comparateur B
  188 0000009A         ;;#define PWM_PERIOD (ROM_SysCtlClockGet() / 16000),
  189 0000009A         ;;en mesure : SysCtlClockGet=0F42400h, /16=0x3E8, 
  190 0000009A         ;;on divise par 2 car moteur 6v sur alim 12v
  191 0000009A         ;*(int *)(0x40028000+0x050)=0x1F4; //PWM0LOAD=periode/2 
                       =0x1F4
  192 0000009A 4E3F            ldr              r6, =PWM1LOAD
  193 0000009C F44F 70FA       mov              r0, #0x1F4
  194 000000A0 6030            str              r0,[r6]
  195 000000A2         
  196 000000A2 4E3E            ldr              r6, =PWM1CMPA ;Valeur rapport c
                                                            yclique : pour 10% 
                                                            => 1C2h si clock = 



ARM Macro Assembler    Page 7 


                                                            0F42400
  197 000000A4 F04F 0001       mov              r0, #VITESSE
  198 000000A8 6030            str              r0, [r6]    ;*(int *)(0x4002800
                                                            0+0x058)=0x01C2;
  199 000000AA         
  200 000000AA 4E3D            ldr              r6, =PWM1CMPB ;PWM0CMPB recoit 
                                                            meme valeur. (CMPA 
                                                            depend du rapport c
                                                            yclique)
  201 000000AC F44F 70FA       mov              r0, #0x1F4  ; *(int *)(0x400280
                                                            00+0x05C)=0x1F4; 
  202 000000B0 6030            str              r0, [r6]
  203 000000B2         
  204 000000B2         ;Control PWM : active PWM Generator 0 (p1167): Enable+up
                       /down + Enable counter debug mod
  205 000000B2 4E36            ldr              r6, =PWM1CTL
  206 000000B4 6830            ldr              r0, [r6]    ;*(int *) (0x400280
                                                            00+0x40)= *(int *)(
                                                            0x40028000+0x40) | 
                                                            0x07;
  207 000000B6 F040 0007       ORR              r0, r0, #0x07
  208 000000BA 6030            str              r0, [r6]
  209 000000BC         
  210 000000BC         ;;-----Fin config des PWMs   
  211 000000BC         
  212 000000BC         ;PORT D OUTPUT pin0 (pwm)=pin1(direction)=pin2(slow deca
                       y)=pin5(12v enable)
  213 000000BC 4E39            ldr              r6, =GPIODIR_D
  214 000000BE 6830            ldr              r0, [r6]
  215 000000C0 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  216 000000C4 6030            str              r0,[r6]
  217 000000C6         ;Port D, 2mA les meme
  218 000000C6 4E38            ldr              r6, =GPIODR2R_D ; 
  219 000000C8 6830            ldr              r0, [r6]
  220 000000CA F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  221 000000CE 6030            str              r0,[r6]
  222 000000D0         ;Port D, Digital Enable
  223 000000D0 4E36            ldr              r6, =GPIODEN_D ;
  224 000000D2 6830            ldr              r0, [r6]
  225 000000D4 F040 0027       ORR              r0, #(GPIO_0+GPIO_1+GPIO_2+GPIO
_5)
  226 000000D8 6030            str              r0,[r6]
  227 000000DA         ;Port D : mise à 1 de slow Decay et 12V et mise à 0 pour
                        dir et pwm
  228 000000DA 4E35            ldr              r6, =(GPIODATA_D+((GPIO_0+GPIO_
1+GPIO_2+GPIO_5)<<2))
  229 000000DC F04F 0024       mov              r0, #(GPIO_2+GPIO_5) ; #0x24
  230 000000E0 6030            str              r0,[r6]
  231 000000E2         
  232 000000E2         ;MOT2, PH1 pour sens moteur ouput
  233 000000E2 4E34            ldr              r6, =GPIODIR_H
  234 000000E4 F04F 0003       mov              r0, #0x03   ; 
  235 000000E8 6030            str              r0,[r6]
  236 000000EA         ;Port H, 2mA les meme
  237 000000EA 4E33            ldr              r6, =GPIODR2R_H
  238 000000EC F04F 0003       mov              r0, #0x03
  239 000000F0 6030            str              r0,[r6]



ARM Macro Assembler    Page 8 


  240 000000F2         ;Port H, Digital Enable
  241 000000F2 4E32            ldr              r6, =GPIODEN_H
  242 000000F4 F04F 0003       mov              r0, #0x03
  243 000000F8 6030            str              r0,[r6]
  244 000000FA         ;Port H : mise à 1 pour dir 
  245 000000FA 4E31            ldr              r6, =(GPIODATA_H +(GPIO_1<<2))
  246 000000FC F04F 0002       mov              r0, #0x02
  247 00000100 6030            str              r0,[r6]
  248 00000102         
  249 00000102 4770            BX               LR          ; FIN du sous progr
                                                            amme d'init.
  250 00000104         
  251 00000104         ;Enable PWM0 (bit 0) et PWM2 (bit 2) p1145 
  252 00000104         ;Attention ici c'est les sorties PWM0 et PWM2
  253 00000104         ;qu'on controle, pas les blocks PWM0 et PWM1!!!
  254 00000104         MOTEUR_DROIT_ON
  255 00000104         ;Enable sortie PWM0 (bit 0), p1145 
  256 00000104 4E2F            ldr              r6, =PWMENABLE
  257 00000106 6830            ldr              r0, [r6]
  258 00000108 F040 0001       orr              r0, #0x01   ;bit 0 à 1
  259 0000010C 6030            str              r0, [r6]
  260 0000010E 4770            BX               LR
  261 00000110         
  262 00000110         MOTEUR_DROIT_OFF
  263 00000110 4E2C            ldr              r6, =PWMENABLE
  264 00000112 6830            ldr              r0, [r6]
  265 00000114 F000 000E       and              r0, #0x0E   ;bit 0 à 0
  266 00000118 6030            str              r0, [r6]
  267 0000011A 4770            BX               LR
  268 0000011C         
  269 0000011C         MOTEUR_GAUCHE_ON
  270 0000011C 4E29            ldr              r6, =PWMENABLE
  271 0000011E 6830            ldr              r0, [r6]
  272 00000120 F040 0004       orr              r0, #0x04   ;bit 2 à 1
  273 00000124 6030            str              r0, [r6]
  274 00000126 4770            BX               LR
  275 00000128         
  276 00000128         MOTEUR_GAUCHE_OFF
  277 00000128 4E26            ldr              r6, =PWMENABLE
  278 0000012A 6830            ldr              r0, [r6]
  279 0000012C F000 000B       and              r0, #0x0B   ;bit 2 à 0
  280 00000130 6030            str              r0, [r6]
  281 00000132 4770            BX               LR
  282 00000134         
  283 00000134         MOTEUR_DROIT_ARRIERE
  284 00000134         ;Inverse Direction (GPIO_D1)
  285 00000134 4E24            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  286 00000136 F04F 0000       mov              r0, #0
  287 0000013A 6030            str              r0,[r6]
  288 0000013C 4770            BX               LR
  289 0000013E         
  290 0000013E         MOTEUR_DROIT_AVANT
  291 0000013E         ;Inverse Direction (GPIO_D1)
  292 0000013E 4E22            ldr              r6, =(GPIODATA_D+(GPIO_1<<2))
  293 00000140 F04F 0002       mov              r0, #2
  294 00000144 6030            str              r0,[r6]
  295 00000146 4770            BX               LR
  296 00000148         
  297 00000148         MOTEUR_GAUCHE_ARRIERE



ARM Macro Assembler    Page 9 


  298 00000148         ;Inverse Direction (GPIO_D1)
  299 00000148 4E1D            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  300 0000014A F04F 0002       mov              r0, #2      ; contraire du mote
                                                            ur Droit
  301 0000014E 6030            str              r0,[r6]
  302 00000150 4770            BX               LR
  303 00000152         
  304 00000152         MOTEUR_GAUCHE_AVANT
  305 00000152         ;Inverse Direction (GPIO_D1)
  306 00000152 4E1B            ldr              r6, =(GPIODATA_H+(GPIO_1<<2))
  307 00000154 F04F 0000       mov              r0, #0
  308 00000158 6030            str              r0,[r6]
  309 0000015A 4770            BX               LR
  310 0000015C         
  311 0000015C                 END
              400FE100 
              400FE108 
              4000752C 
              4002752C 
              40007420 
              40027420 
              40028040 
              40028060 
              40028064 
              40028050 
              40028058 
              4002805C 
              40028080 
              400280A0 
              400280A4 
              40028090 
              40028098 
              4002809C 
              40007400 
              40007500 
              4000751C 
              4000709C 
              40027400 
              40027500 
              4002751C 
              40027008 
              40028008 
              40007008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\motor_config.d -o.\objects\motor_config.o -I.\RTE\_Targe
t_1 -IC:\Users\loicd\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include
 -IC:\Users\loicd\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\Device\ARM\ARMCM3\Inc
lude --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 528" -
-predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1" --list=.\listings\motor_c
onfig.lst Programs\motor_config.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 66 in file Programs\motor_config.s
   Uses
      None
Comment: .text unused
MOTEUR_DROIT_ARRIERE 00000134

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 283 in file Programs\motor_config.s
   Uses
      At line 74 in file Programs\motor_config.s
Comment: MOTEUR_DROIT_ARRIERE used once
MOTEUR_DROIT_AVANT 0000013E

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 290 in file Programs\motor_config.s
   Uses
      At line 73 in file Programs\motor_config.s
Comment: MOTEUR_DROIT_AVANT used once
MOTEUR_DROIT_OFF 00000110

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 262 in file Programs\motor_config.s
   Uses
      At line 72 in file Programs\motor_config.s
Comment: MOTEUR_DROIT_OFF used once
MOTEUR_DROIT_ON 00000104

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 254 in file Programs\motor_config.s
   Uses
      At line 71 in file Programs\motor_config.s
Comment: MOTEUR_DROIT_ON used once
MOTEUR_GAUCHE_ARRIERE 00000148

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 297 in file Programs\motor_config.s
   Uses
      At line 78 in file Programs\motor_config.s
Comment: MOTEUR_GAUCHE_ARRIERE used once
MOTEUR_GAUCHE_AVANT 00000152

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 304 in file Programs\motor_config.s
   Uses
      At line 77 in file Programs\motor_config.s
Comment: MOTEUR_GAUCHE_AVANT used once
MOTEUR_GAUCHE_OFF 00000128

Symbol: MOTEUR_GAUCHE_OFF



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 276 in file Programs\motor_config.s
   Uses
      At line 76 in file Programs\motor_config.s
Comment: MOTEUR_GAUCHE_OFF used once
MOTEUR_GAUCHE_ON 0000011C

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 269 in file Programs\motor_config.s
   Uses
      At line 75 in file Programs\motor_config.s
Comment: MOTEUR_GAUCHE_ON used once
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 80 in file Programs\motor_config.s
   Uses
      At line 70 in file Programs\motor_config.s
Comment: MOTEUR_INIT used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIOAFSEL_D 40007420

Symbol: GPIOAFSEL_D
   Definitions
      At line 31 in file Programs\motor_config.s
   Uses
      At line 122 in file Programs\motor_config.s
Comment: GPIOAFSEL_D used once
GPIOAFSEL_H 40027420

Symbol: GPIOAFSEL_H
   Definitions
      At line 39 in file Programs\motor_config.s
   Uses
      At line 129 in file Programs\motor_config.s
Comment: GPIOAFSEL_H used once
GPIODATA_D 40007000

Symbol: GPIODATA_D
   Definitions
      At line 26 in file Programs\motor_config.s
   Uses
      At line 228 in file Programs\motor_config.s
      At line 285 in file Programs\motor_config.s
      At line 292 in file Programs\motor_config.s

GPIODATA_H 40027000

Symbol: GPIODATA_H
   Definitions
      At line 34 in file Programs\motor_config.s
   Uses
      At line 245 in file Programs\motor_config.s
      At line 299 in file Programs\motor_config.s
      At line 306 in file Programs\motor_config.s

GPIODEN_D 4000751C

Symbol: GPIODEN_D
   Definitions
      At line 29 in file Programs\motor_config.s
   Uses
      At line 223 in file Programs\motor_config.s
Comment: GPIODEN_D used once
GPIODEN_H 4002751C

Symbol: GPIODEN_H
   Definitions
      At line 37 in file Programs\motor_config.s
   Uses
      At line 241 in file Programs\motor_config.s
Comment: GPIODEN_H used once
GPIODIR_D 40007400

Symbol: GPIODIR_D
   Definitions
      At line 27 in file Programs\motor_config.s
   Uses
      At line 213 in file Programs\motor_config.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIODIR_D used once
GPIODIR_H 40027400

Symbol: GPIODIR_H
   Definitions
      At line 35 in file Programs\motor_config.s
   Uses
      At line 233 in file Programs\motor_config.s
Comment: GPIODIR_H used once
GPIODR2R_D 40007500

Symbol: GPIODR2R_D
   Definitions
      At line 28 in file Programs\motor_config.s
   Uses
      At line 218 in file Programs\motor_config.s
Comment: GPIODR2R_D used once
GPIODR2R_H 40027500

Symbol: GPIODR2R_H
   Definitions
      At line 36 in file Programs\motor_config.s
   Uses
      At line 237 in file Programs\motor_config.s
Comment: GPIODR2R_H used once
GPIOPCTL_D 4000752C

Symbol: GPIOPCTL_D
   Definitions
      At line 30 in file Programs\motor_config.s
   Uses
      At line 108 in file Programs\motor_config.s
Comment: GPIOPCTL_D used once
GPIOPCTL_H 4002752C

Symbol: GPIOPCTL_H
   Definitions
      At line 38 in file Programs\motor_config.s
   Uses
      At line 116 in file Programs\motor_config.s
Comment: GPIOPCTL_H used once
GPIO_0 00000001

Symbol: GPIO_0
   Definitions
      At line 15 in file Programs\motor_config.s
   Uses
      At line 215 in file Programs\motor_config.s
      At line 220 in file Programs\motor_config.s
      At line 225 in file Programs\motor_config.s
      At line 228 in file Programs\motor_config.s

GPIO_1 00000002

Symbol: GPIO_1
   Definitions
      At line 16 in file Programs\motor_config.s
   Uses
      At line 215 in file Programs\motor_config.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 220 in file Programs\motor_config.s
      At line 225 in file Programs\motor_config.s
      At line 228 in file Programs\motor_config.s
      At line 245 in file Programs\motor_config.s
      At line 285 in file Programs\motor_config.s
      At line 292 in file Programs\motor_config.s
      At line 299 in file Programs\motor_config.s
      At line 306 in file Programs\motor_config.s

GPIO_2 00000004

Symbol: GPIO_2
   Definitions
      At line 17 in file Programs\motor_config.s
   Uses
      At line 215 in file Programs\motor_config.s
      At line 220 in file Programs\motor_config.s
      At line 225 in file Programs\motor_config.s
      At line 228 in file Programs\motor_config.s
      At line 229 in file Programs\motor_config.s

GPIO_5 00000020

Symbol: GPIO_5
   Definitions
      At line 18 in file Programs\motor_config.s
   Uses
      At line 215 in file Programs\motor_config.s
      At line 220 in file Programs\motor_config.s
      At line 225 in file Programs\motor_config.s
      At line 228 in file Programs\motor_config.s
      At line 229 in file Programs\motor_config.s

PORTD_BASE 40007000

Symbol: PORTD_BASE
   Definitions
      At line 25 in file Programs\motor_config.s
   Uses
      At line 26 in file Programs\motor_config.s
      At line 27 in file Programs\motor_config.s
      At line 28 in file Programs\motor_config.s
      At line 29 in file Programs\motor_config.s
      At line 30 in file Programs\motor_config.s
      At line 31 in file Programs\motor_config.s

PORTH_BASE 40027000

Symbol: PORTH_BASE
   Definitions
      At line 33 in file Programs\motor_config.s
   Uses
      At line 34 in file Programs\motor_config.s
      At line 35 in file Programs\motor_config.s
      At line 36 in file Programs\motor_config.s
      At line 37 in file Programs\motor_config.s
      At line 38 in file Programs\motor_config.s
      At line 39 in file Programs\motor_config.s




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

PWM0CMPA 40028058

Symbol: PWM0CMPA
   Definitions
      At line 48 in file Programs\motor_config.s
   Uses
      At line 157 in file Programs\motor_config.s
Comment: PWM0CMPA used once
PWM0CMPB 4002805C

Symbol: PWM0CMPB
   Definitions
      At line 49 in file Programs\motor_config.s
   Uses
      At line 161 in file Programs\motor_config.s
Comment: PWM0CMPB used once
PWM0CTL 40028040

Symbol: PWM0CTL
   Definitions
      At line 46 in file Programs\motor_config.s
   Uses
      At line 137 in file Programs\motor_config.s
      At line 166 in file Programs\motor_config.s

PWM0GENA 40028060

Symbol: PWM0GENA
   Definitions
      At line 50 in file Programs\motor_config.s
   Uses
      At line 141 in file Programs\motor_config.s
Comment: PWM0GENA used once
PWM0GENB 40028064

Symbol: PWM0GENB
   Definitions
      At line 51 in file Programs\motor_config.s
   Uses
      At line 146 in file Programs\motor_config.s
Comment: PWM0GENB used once
PWM0LOAD 40028050

Symbol: PWM0LOAD
   Definitions
      At line 47 in file Programs\motor_config.s
   Uses
      At line 153 in file Programs\motor_config.s
Comment: PWM0LOAD used once
PWM1CMPA 40028098

Symbol: PWM1CMPA
   Definitions
      At line 56 in file Programs\motor_config.s
   Uses
      At line 196 in file Programs\motor_config.s
Comment: PWM1CMPA used once
PWM1CMPB 4002809C




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: PWM1CMPB
   Definitions
      At line 57 in file Programs\motor_config.s
   Uses
      At line 200 in file Programs\motor_config.s
Comment: PWM1CMPB used once
PWM1CTL 40028080

Symbol: PWM1CTL
   Definitions
      At line 54 in file Programs\motor_config.s
   Uses
      At line 174 in file Programs\motor_config.s
      At line 205 in file Programs\motor_config.s

PWM1GENA 400280A0

Symbol: PWM1GENA
   Definitions
      At line 58 in file Programs\motor_config.s
   Uses
      At line 178 in file Programs\motor_config.s
Comment: PWM1GENA used once
PWM1GENB 400280A4

Symbol: PWM1GENB
   Definitions
      At line 59 in file Programs\motor_config.s
   Uses
      At line 184 in file Programs\motor_config.s
Comment: PWM1GENB used once
PWM1LOAD 40028090

Symbol: PWM1LOAD
   Definitions
      At line 55 in file Programs\motor_config.s
   Uses
      At line 192 in file Programs\motor_config.s
Comment: PWM1LOAD used once
PWMENABLE 40028008

Symbol: PWMENABLE
   Definitions
      At line 43 in file Programs\motor_config.s
   Uses
      At line 256 in file Programs\motor_config.s
      At line 263 in file Programs\motor_config.s
      At line 270 in file Programs\motor_config.s
      At line 277 in file Programs\motor_config.s

PWM_BASE 40028000

Symbol: PWM_BASE
   Definitions
      At line 42 in file Programs\motor_config.s
   Uses
      At line 43 in file Programs\motor_config.s
      At line 46 in file Programs\motor_config.s
      At line 47 in file Programs\motor_config.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 48 in file Programs\motor_config.s
      At line 49 in file Programs\motor_config.s
      At line 50 in file Programs\motor_config.s
      At line 51 in file Programs\motor_config.s
      At line 54 in file Programs\motor_config.s
      At line 55 in file Programs\motor_config.s
      At line 56 in file Programs\motor_config.s
      At line 57 in file Programs\motor_config.s
      At line 58 in file Programs\motor_config.s
      At line 59 in file Programs\motor_config.s

SYSCTL_RCGC0 400FE100

Symbol: SYSCTL_RCGC0
   Definitions
      At line 21 in file Programs\motor_config.s
   Uses
      At line 81 in file Programs\motor_config.s
Comment: SYSCTL_RCGC0 used once
SYSCTL_RCGC2 400FE108

Symbol: SYSCTL_RCGC2
   Definitions
      At line 22 in file Programs\motor_config.s
   Uses
      At line 91 in file Programs\motor_config.s
      At line 97 in file Programs\motor_config.s

VITESSE 00000001

Symbol: VITESSE
   Definitions
      At line 62 in file Programs\motor_config.s
   Uses
      At line 158 in file Programs\motor_config.s
      At line 197 in file Programs\motor_config.s

35 symbols
381 symbols in table
